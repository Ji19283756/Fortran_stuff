!gfortran, gcc version 7.4.0

program random
    implicit none
    logical :: Rabin_Miller, check_if_prime, test
    integer(16) :: x, y, randint, thing
    thing =1511
    y = 0
    print *, Rabin_Miller(thing)
    do x = 1,2000000
        if (check_if_prime(x)) then
            !print *, x, " is prime"
            y = y + 1
        end if
    end do
    print *, "y = ", y
end program random

function check_if_prime(number_1) result (number_is_prime)
    logical :: number_is_prime, Rabin_Miller
    integer(16) :: number_1, x, index_x
    integer(16), dimension(168) :: lowPrimes
    
    if (number_1 < 2) then
        number_is_prime = .false.
        return
    end if
    
    lowPrimes = (/2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, &
                         67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,&
                         157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,&
                         251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,&
                         353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,&
                         457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,&
                         571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661,&
                         673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787,&
                         797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,&
                         911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997/)
    !print *, "number = ", number_1       
    do x = 1,size(lowPrimes)
        index_x = lowPrimes(x)
        ! means that the number is divisible by a value in lowPrimes
        if (index_x.eq.number_1) then
            number_is_prime = .true.
            return
        
        else if (mod(number_1, index_x).eq.0) then
            number_is_prime = .false.
            return
        ! means that number in lowPrimes
        
        end if
        
    end do
    
    if (Rabin_Miller(number_1)) then
        number_is_prime = Rabin_Miller(number_1)
    else
        number_is_prime = .false.
    end if
    
end function check_if_prime


function Rabin_Miller(number) result (is_prime)
    logical :: is_prime
    integer(16), intent(in) :: number
    integer(16) :: t, s, v, i, trials, a, randint, two = 2
    !print *, number, "number"
    s = number - 1
    t = 0
    
    do while (mod(s,2).eq.0)
        s = s/2
        t = t+1 
    end do
    
    do trials = 1,5 
        a = randint(two, number-1)
        v = mod(a**s, number)
        
        if (.not.v.eq.1) then
            i = 0
            do while (.not.v.eq.number - 1)
                if (i.eq.(t-1)) then
                    is_prime = .true.
                    return
                else 
                    i = i + 1
                    v = mod((v**2),number)
                end if
            end do
        end if
        
    end do 
    is_prime = .false.
    return

end function Rabin_Miller


function randint(from, to) result (random_int)
    implicit none
    integer(16), intent(in) :: from, to
    integer(16) :: random_int
    real :: RNG1
    
    call random_seed()
    call random_number(RNG1)
    
    random_int = int(from + int(RNG1 * (to - from + 1)))
    
end function randint

